#!/bin/bash
while read -r line
do
    IFS=' ' read -r -a array <<< "$line"
    if [ "${array[0]}" == "*" ]
    then
        IFS=' ' read -r -a array <<< "$line"
        branch_name="${array[1]}"
        echo -e "WORKING ON BRANCH : $branch_name"
        IFS='-' read -r -a array <<< "$branch_name"
        branch_id="${array[1]}"
        if [ "$(echo "$line" | awk '{split($0,a,"-"); print a[1]}')"  == "* feature" ]
        then
            header="Feature #$branch_id"
        fi

        if [ "$(echo "$line" | awk '{split($0,a,"-"); print a[1]}')"  == "* fix" ]
        then
            header="Fixed #$branch_id"
        fi

        if [ "$1" = "-p" ]
        then
            echo "Pulling branch $branch_name ... ";
            git pull origin "$branch_name"
        elif [ "$1" = "-h" ]
        then
            echo "-p  => git pull"
            echo "-cp => git checkout "
        elif [ "$1" = "-c" ]
            git stash save -u "jig stash save for $branch_name"
            git checkout -b "$2" origin/master
            echo -e "CREATE : $2"
        elif [ "$1" = "-cp" ]
        then
            git stash save -u "jig stash save for $branch_name"
            git checkout -b "$2" origin/$2
            echo -e "COPY : $2"
        elif [ "$1" = "-rb" ]
        then
            if [ "$2" = "-r" ]
            then
                git add .
                git reset
                git checkout .
                while read -r file_name
                do
                    echo "remove : $file_name"
                    rm -rf "$file_name"
                done < <(git status)
            else
                git status | grep 'nothing to commit' &> /dev/null
                if [ $? == 0 ]; 
                then
                    git fetch origin
                    git checkout master
                    git pull origin master
                    git checkout "$branch_name"
                    git rebase --onto master
                    git pull origin "$branch_name"
                    git status
                    git stash list
                else
                    echo "PLEASE CLEAN YOUR WORK BEFORE REBASE."
                    # git stash save -u "jig stash save for $branch_name"
                    # git checkout .
                    # git clean -f
                fi
            fi
        elif [ "$1" = "-ch" ]
        then
            if [ "$2" = "-cm" ]
            then
                echo "YOU NEED TO CHANGE COMMIT MESSAGE FROM $3 TO $4 (CONFIRM Y/N) : "
            elif [ "$2" = "-bn" ]
            then
                echo "YOU NEED TO CHANGE BRANCH NAME FROM $3 TO $4 (CONFIRM Y/N) : "
            else
                echo "PLEASE SELECT -ch OPTIONS"
                echo "-cm FOR CHANGE LASTEST COMMIT MESSAGE"
                echo "-bn FOR CHANGE BRANCH NAME"
            fi
        elif [ "$1" = "man" ]
        then
            man_page
        elif [ "$1" = "-s" ]
        then
            gt-precommit
            git stash save -u
            git checkout $2
            gts
        elif [ "$1" = "-d" ]
        then
            gt-precommit
            git diff
        else
            echo -e "COMMIT MESSAGE : \"$header $1\""
            # git add .
            git commit -m "$header $1"
            git push origin "$branch_name"
        fi
    break
    fi
done < <(git branch)

function man_page {
    echo "Welcome to git assistant"
    echo ""
}